#!/usr/bin/env php
<?php
	use App\CalorieCounting;
	use App\CampCleanup;
	use App\CathodeRayTube;
	use App\DistressSignal;
	use App\HillClimbingAlgorithm;
	use App\MonkeyInTheMiddle;
	use App\NoSpaceLeftOnDevice;
	use App\RockPaperScissors;
	use App\RopeBridge;
	use App\RucksackReorganization;
	use App\SupplyStacks;
	use App\TreetopTreeHouse;
	use App\TuningTrouble;

	ini_set("memory_limit", "256M");

	const ROOT = __DIR__ . "/../";

	require_once(ROOT . "bin/init.php");

	// ./bin/run --day 1 --override example --verbose
	// ./bin/run --day 1 --override example --verbose --time
	// ./bin/run -d=1 -o=example -v

	$helpers = [
		1 => CalorieCounting::class,
		2 => RockPaperScissors::class,
		3 => RucksackReorganization::class,
		4 => CampCleanup::class,
		5 => SupplyStacks::class,
		6 => TuningTrouble::class,
		7 => NoSpaceLeftOnDevice::class,
		8 => TreetopTreeHouse::class,
		9 => RopeBridge::class,
		10 => CathodeRayTube::class,
		11 => MonkeyInTheMiddle::class,
		12 => HillClimbingAlgorithm::class,
		13 => DistressSignal::class
	];

/*

	$_fp = fopen("data/13/example", "r");

	$P = []; $i = 1; $sum = 0;

	while (!feof($_fp))
	{
		array_push($P, $L = trim(fgets($_fp)), $R = trim(fgets($_fp)));
		fgets($_fp); // blank

		if (packet_compare(json_decode($L), json_decode($R)) < 1)
		{
			$sum += $i;
		}

		$i++;
	}

die();
	array_push($P, '[[2]]', '[[6]]');
	usort($P, "packet_compare");
	$decoder = (array_search("[[2]]", $P) + 1) * (array_search("[[6]]", $P) + 1);

	echo "part 1: {$sum}\n";
	echo "part 2: {$decoder}\n";

	function packet_compare($l, $r)
	{
		if (is_int($l) && is_int($r))
		{
			return $l <=> $r;
		}

		if (is_int($l) && is_array($r))
		{
			$l = [$l];
		}

		if (is_array($l) && is_int($r))
		{
			$r = [$r];
		}

		while (count($l) && count($r))
		{
			$_l = array_shift($l);
			$_r = array_shift($r);
			if ($result = packet_compare($_l, $_r)) return $result;
		}
		return count($l) - count($r);

	}



	die();*/


	$options = getopt("d:o:vt", ["day:", "override:", "verbose", "time"]);

	$day = (int)($options['day'] ?? $options['d'] ?? null);
	$override = $options['override'] ?? $options['o'] ?? null;
	$verbose = isset($options['verbose']) || isset($options['v']);
	$time = isset($options['time']) || isset($options['t']);

	if (!isset($helpers[$day]))
	{
		throw new Exception("Day " . $day . " missing from config");
	}

	$start = hrtime(true);

	(new $helpers[$day](
		$day,
		$verbose,
		isset($override) ? ROOT . "data/" . str_pad($day, 2, "0", STR_PAD_LEFT) . "/" . $override : null
	))
		->run()
		->output()
	;

	$end = hrtime(true);

	if ($time)
	{
		$executionTime = $end - $start;
		echo(($executionTime / 1000000) . "ms" . PHP_EOL);
	}
?>
